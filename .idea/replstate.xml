<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1492517437974">{:repl-history {:ide [], :local [&quot;(s/explain data)&quot; &quot;(pst)&quot; &quot;(s/explain ::query data)&quot; &quot;()&quot; &quot;(s/valid? ::query data)&quot; &quot;(def args {:id 1})&quot; &quot;(map (fn [x] (println x)) atgs)&quot; &quot;(def args {:id 1\n           :something \&quot;else\&quot;})&quot; &quot;(map (fn [x] (println x)) args)&quot; &quot;(args-&gt;str {:id 1\n            :a \&quot;b\&quot;})&quot; &quot;(s/conform ::query data)&quot; &quot;(def fields [[:field :name] [:nested-field [[:field :friends] [:nested-field [[:field :name] [:field :address]]]]]])&quot; &quot;(map println fields)&quot; &quot;(interpose)&quot; &quot;(def fields [:name ])&quot; &quot;(def fields [\&quot;name\&quot; [\&quot;friends\&quot; [\&quot;name\&quot; \&quot;address\&quot;]]])&quot; &quot;(apple interpose \&quot;,\&quot; fields)&quot; &quot;(flatten fields)&quot; &quot;(map )&quot; &quot;(str fields)&quot; &quot;(args-&gt;str {:id 1})&quot; &quot;(args-&gt;str {:id {:a 7}})&quot; &quot;(interpose [\&quot;abd\&quot; \&quot;dsad\&quot;] \&quot;,\&quot;)&quot; &quot;(interpose [[\&quot;dasd\&quot;] [\&quot;dsad\&quot;]] \&quot;,\&quot;)&quot; &quot;(interpose  \&quot;,\&quot; [\&quot;abd\&quot; \&quot;dsad\&quot;])&quot; &quot;(flatten (interpose  \&quot;,\&quot; [\&quot;abd\&quot; \&quot;dsad\&quot;]))&quot; &quot;(-&gt;fields-str [:as [:sdas [:asd :dsad]]])&quot; &quot;(-&gt;fields-str [:ass [:sdas [:asd :dsad]]])&quot; &quot;(-&gt;fields-str  [[:field :name] [:nested-field [[:field :friends] [:nested-field [[:field :name] [:field :address]]]]])&quot; &quot;(apply str (interpose  \&quot;,\&quot; [\&quot;abd\&quot; \&quot;dsad\&quot;]))&quot; &quot;(def data2 [:name [:friends [:name :address]]])&quot; &quot;(for [v data2] (println v))&quot; &quot;(fields-&gt;str data2)&quot; &quot;(map -&gt;fields-str [[:field :a] [:field :b]])&quot; &quot;(-&gt;&gt; (map -&gt;fields-str [[:field :a] [:field :b]])\n     (interpose \&quot;,\&quot;)\n     (apply str))&quot; &quot;(-&gt;&gt; (map -&gt;fields-str [[:field :a] [:field :b] [:nested-field [[:field :friends] [:nested-field [[:fields :name]]]]]])\n     (interpose \&quot;,\&quot;)\n     (apply str))&quot; &quot;(-&gt;&gt; (map -&gt;fields-str [[:field :a] [:field :b] [:nested-field [[:field :friends] [:nested-field [[:field :name]]]]]])\n     )&quot; &quot;(-&gt;&gt; (map -&gt;fields-str [[:field :a] [:field :b] [:nested-field [[:field :friends] [:nested-field [[:field :name]]]]]])\n     (interpose \&quot;,\&quot;)\n     (apply str))&quot; &quot;(-&gt;&gt; (map -&gt;fields-str [[:field :a] [:field :b] [:nested-field [[:field :friends] [:nested-field [[:field :name]]]]]])\n     args-&gt;str)&quot; &quot;(def final (-&gt;&gt; (map -&gt;fields-str [[:field :a] [:field :b] [:nested-field [[:field :friends] [:nested-field [[:field :name]]]]]])\n                ))&quot; &quot;(fields-&gt;str final)&quot; &quot;(s/conform :venia/fields [:name])&quot; &quot;(s/conform :venia/fields [:name :address])&quot; &quot;(s/conform :venia/fields [:name :address [:friends [:name]]])&quot; &quot;(-&gt;query-str (first data))&quot; &quot;(s/conform :venia/query data)&quot; &quot;(map println data)&quot; &quot;(data)&quot; &quot;data&quot; &quot;(-&gt;query-str data)&quot; &quot;(graphql-query data)&quot; &quot;(s/conform :venia/query [[:employee {:id 1} [:name :address [:friends [:name :email]]]]])&quot; &quot;(s/gen :venia/fields)&quot;], :remote []}}</component>
</project>